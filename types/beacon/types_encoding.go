// Code generated by fastssz. DO NOT EDIT.
// Hash: 7b06aa2a0612821c21a42cced443e791afc5c4f842d09312d0f29e40102138a3
// Version: 0.1.3
package beacon

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the LightClientUpdateKey object
func (l *LightClientUpdateKey) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the LightClientUpdateKey object to a target array
func (l *LightClientUpdateKey) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'StartPeriod'
	dst = ssz.MarshalUint64(dst, l.StartPeriod)

	// Field (1) 'Count'
	dst = ssz.MarshalUint64(dst, l.Count)

	return
}

// UnmarshalSSZ ssz unmarshals the LightClientUpdateKey object
func (l *LightClientUpdateKey) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 16 {
		return ssz.ErrSize
	}

	// Field (0) 'StartPeriod'
	l.StartPeriod = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Count'
	l.Count = ssz.UnmarshallUint64(buf[8:16])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the LightClientUpdateKey object
func (l *LightClientUpdateKey) SizeSSZ() (size int) {
	size = 16
	return
}

// HashTreeRoot ssz hashes the LightClientUpdateKey object
func (l *LightClientUpdateKey) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the LightClientUpdateKey object with a hasher
func (l *LightClientUpdateKey) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'StartPeriod'
	hh.PutUint64(l.StartPeriod)

	// Field (1) 'Count'
	hh.PutUint64(l.Count)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the LightClientUpdateKey object
func (l *LightClientUpdateKey) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}

// MarshalSSZ ssz marshals the LightClientBootstrapKey object
func (l *LightClientBootstrapKey) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the LightClientBootstrapKey object to a target array
func (l *LightClientBootstrapKey) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'BlockHash'
	if size := len(l.BlockHash); size != 32 {
		err = ssz.ErrBytesLengthFn("LightClientBootstrapKey.BlockHash", size, 32)
		return
	}
	dst = append(dst, l.BlockHash...)

	return
}

// UnmarshalSSZ ssz unmarshals the LightClientBootstrapKey object
func (l *LightClientBootstrapKey) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 32 {
		return ssz.ErrSize
	}

	// Field (0) 'BlockHash'
	if cap(l.BlockHash) == 0 {
		l.BlockHash = make([]byte, 0, len(buf[0:32]))
	}
	l.BlockHash = append(l.BlockHash, buf[0:32]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the LightClientBootstrapKey object
func (l *LightClientBootstrapKey) SizeSSZ() (size int) {
	size = 32
	return
}

// HashTreeRoot ssz hashes the LightClientBootstrapKey object
func (l *LightClientBootstrapKey) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the LightClientBootstrapKey object with a hasher
func (l *LightClientBootstrapKey) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'BlockHash'
	if size := len(l.BlockHash); size != 32 {
		err = ssz.ErrBytesLengthFn("LightClientBootstrapKey.BlockHash", size, 32)
		return
	}
	hh.PutBytes(l.BlockHash)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the LightClientBootstrapKey object
func (l *LightClientBootstrapKey) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}

// MarshalSSZ ssz marshals the LightClientFinalityUpdateKey object
func (l *LightClientFinalityUpdateKey) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the LightClientFinalityUpdateKey object to a target array
func (l *LightClientFinalityUpdateKey) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'FinalizedSlot'
	dst = ssz.MarshalUint64(dst, l.FinalizedSlot)

	return
}

// UnmarshalSSZ ssz unmarshals the LightClientFinalityUpdateKey object
func (l *LightClientFinalityUpdateKey) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 8 {
		return ssz.ErrSize
	}

	// Field (0) 'FinalizedSlot'
	l.FinalizedSlot = ssz.UnmarshallUint64(buf[0:8])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the LightClientFinalityUpdateKey object
func (l *LightClientFinalityUpdateKey) SizeSSZ() (size int) {
	size = 8
	return
}

// HashTreeRoot ssz hashes the LightClientFinalityUpdateKey object
func (l *LightClientFinalityUpdateKey) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the LightClientFinalityUpdateKey object with a hasher
func (l *LightClientFinalityUpdateKey) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'FinalizedSlot'
	hh.PutUint64(l.FinalizedSlot)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the LightClientFinalityUpdateKey object
func (l *LightClientFinalityUpdateKey) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}

// MarshalSSZ ssz marshals the LightClientOptimisticUpdateKey object
func (l *LightClientOptimisticUpdateKey) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the LightClientOptimisticUpdateKey object to a target array
func (l *LightClientOptimisticUpdateKey) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'OptimisticSlot'
	dst = ssz.MarshalUint64(dst, l.OptimisticSlot)

	return
}

// UnmarshalSSZ ssz unmarshals the LightClientOptimisticUpdateKey object
func (l *LightClientOptimisticUpdateKey) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 8 {
		return ssz.ErrSize
	}

	// Field (0) 'OptimisticSlot'
	l.OptimisticSlot = ssz.UnmarshallUint64(buf[0:8])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the LightClientOptimisticUpdateKey object
func (l *LightClientOptimisticUpdateKey) SizeSSZ() (size int) {
	size = 8
	return
}

// HashTreeRoot ssz hashes the LightClientOptimisticUpdateKey object
func (l *LightClientOptimisticUpdateKey) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the LightClientOptimisticUpdateKey object with a hasher
func (l *LightClientOptimisticUpdateKey) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'OptimisticSlot'
	hh.PutUint64(l.OptimisticSlot)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the LightClientOptimisticUpdateKey object
func (l *LightClientOptimisticUpdateKey) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}
