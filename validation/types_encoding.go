// Code generated by fastssz. DO NOT EDIT.
// Hash: 85173a5d4024978f82aef12765deb4595a073417fb5ca46e4757771d34dd7b53
// Version: 0.1.3
package validation

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PreMergeAccumulator object
func (p *PreMergeAccumulator) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PreMergeAccumulator object to a target array
func (p *PreMergeAccumulator) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'HistoricalEpochs'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'HistoricalEpochs'
	if size := len(p.HistoricalEpochs); size > 1897 {
		err = ssz.ErrListTooBigFn("PreMergeAccumulator.HistoricalEpochs", size, 1897)
		return
	}
	for ii := 0; ii < len(p.HistoricalEpochs); ii++ {
		if size := len(p.HistoricalEpochs[ii]); size != 32 {
			err = ssz.ErrBytesLengthFn("PreMergeAccumulator.HistoricalEpochs[ii]", size, 32)
			return
		}
		dst = append(dst, p.HistoricalEpochs[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the PreMergeAccumulator object
func (p *PreMergeAccumulator) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'HistoricalEpochs'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 != 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'HistoricalEpochs'
	{
		buf = tail[o0:]
		num, err := ssz.DivideInt2(len(buf), 32, 1897)
		if err != nil {
			return err
		}
		p.HistoricalEpochs = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(p.HistoricalEpochs[ii]) == 0 {
				p.HistoricalEpochs[ii] = make([]byte, 0, len(buf[ii*32:(ii+1)*32]))
			}
			p.HistoricalEpochs[ii] = append(p.HistoricalEpochs[ii], buf[ii*32:(ii+1)*32]...)
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PreMergeAccumulator object
func (p *PreMergeAccumulator) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'HistoricalEpochs'
	size += len(p.HistoricalEpochs) * 32

	return
}

// HashTreeRoot ssz hashes the PreMergeAccumulator object
func (p *PreMergeAccumulator) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PreMergeAccumulator object with a hasher
func (p *PreMergeAccumulator) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'HistoricalEpochs'
	{
		if size := len(p.HistoricalEpochs); size > 1897 {
			err = ssz.ErrListTooBigFn("PreMergeAccumulator.HistoricalEpochs", size, 1897)
			return
		}
		subIndx := hh.Index()
		for _, i := range p.HistoricalEpochs {
			if len(i) != 32 {
				err = ssz.ErrBytesLength
				return
			}
			hh.Append(i)
		}
		numItems := uint64(len(p.HistoricalEpochs))
		hh.MerkleizeWithMixin(subIndx, numItems, 1897)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PreMergeAccumulator object
func (p *PreMergeAccumulator) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}
